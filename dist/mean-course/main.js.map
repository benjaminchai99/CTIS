{"version":3,"sources":["./src/app/posts/post-list/post-list.component.ts","./src/app/posts/post-list/post-list.component.html","./src/environments/environment.ts","./src/app/option/option-list.component.ts","./src/app/option/option-list.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/posts/posts.service.ts","./src/app/app.module.ts","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/posts/post-create/post-create.component.ts","./src/app/posts/post-create/post-create.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {Post} from '../post.model';\nimport {PostsService} from '../posts.service';\n\n@Component({\n  selector: 'app-post-list',\n  templateUrl: './post-list.component.html',\n  styleUrls: ['./post-list.component.css']\n})\n\nexport class PostListComponent implements OnInit {\n\n  posts: Post[] = [];\n\n  /*posts = [\n    {title: 'First Post', content: 'This is the first post\\'s content'},\n    {title: 'Second Post', content: 'This is the second post\\'s content'},\n    {title: 'Third Post', content: 'This is the third post\\'s content'}\n  ];\n*/\n\n  // constructor: function that is called whenever Angular create new instance\n  // public keyword: automatically create a new property in component and store incoming value\n  constructor(public postsService : PostsService) { // Instance: type of service defined\n  }\n\n  // function that automatically execute when Angular create this component. For basic initialisation\n  ngOnInit(){\n    this.posts = this.postsService.getPosts(); // call the service to get posts\n  }\n}\n\n\n","<mat-accordion multi=\"true\" *ngIf=\"posts.length>0\">\n<mat-expansion-panel *ngFor=\"let post of posts\">\n<mat-expansion-panel-header>\n  {{post.title}}\n</mat-expansion-panel-header>\n<p>{{post.content}}</p>\n\n<mat-action-row>\n  <button mat-button color=\"primary\">EDIT</button>\n  <button mat-button color=\"warn\">DELETE</button>\n</mat-action-row>\n</mat-expansion-panel>\n</mat-accordion>\n<p class=\"info-text mat-body-1\" *ngIf=\"posts.length == 0\">No posts added yet</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-list-option',\n  templateUrl: './option-list.component.html',\n  styleUrls: ['./option-list.component.css']\n})\n\nexport class OptionListComponent{\n\n  options = [\n    {task: 'Print assignment',\n      priority: 'high'},\n    {task: 'Discuss assignment',\n      priority: 'medium'},\n    {task: 'Read assignment',\n      priority: 'low'}]\n\n  /*\n  setColor(priority){\n    switch(priority){\n      case 'high':\n        return 'red';\n      case 'medium':\n        return 'blue';\n      case 'low':\n        return 'green';\n    }\n  }\n  */\n}\n","<ul *ngFor= \"let item of options\">\n  <!-- <li [ngStyle]= \"{'color':setColor(item.priority)}\">{{ item.task }} ({{ item.priority }})</li> -->\n\n  <li [ngClass]=\"{\n    'text-low':item.priority === 'low',\n    'text-medium':item.priority === 'medium',\n    'text-high':item.priority === 'high'\n  }\"> {{item.task}} ({{item.priority}})\n  </li>\n\n</ul>\n","import { Component } from '@angular/core';\n\nimport {Post} from './posts/post.model';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  //title = 'mean-course';\n  storedPosts: Post[] = [];\n\n  onPostAdded(post){\n    this.storedPosts.push(post)\n  }\n}\n","<app-header></app-header>\n<main>\n  <a mat-button color=\"primary\" routerLink=\"/create\">Create</a>\n  <a mat-button color=\"primary\" routerLink=\"/list\">List</a>\n<router-outlet></router-outlet>\n<app-list-option></app-list-option>\n</main>\n","import {Post} from \"./post.model\";\nimport {Injectable} from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\n@Injectable({providedIn: 'root'})\n\nexport class PostsService {\n  //create a service class\n  private posts: Post[] = []; //Set type to Post array(model) and assign to empty array\n\n  //retrieve the post\n  getPosts(){\n  return this.posts; //creating new array by coping the old array\n  }\n\n  //add a post\n  addPost(title: string, content: string){ //method to add post with arguments\n  const post: Post = {title: title, content: content}; //variable storing values of post\n  this.posts.push(post); // push the new post into posts array\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule} from '@angular/forms';\n\nimport { HeaderComponent } from './header/header.component';\nimport { AppComponent } from './app.component';\nimport { PostCreateComponent } from './posts/post-create/post-create.component';\nimport { PostListComponent } from './posts/post-list/post-list.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { OptionListComponent} from './option/option-list.component';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule} from '@angular/material/card';\nimport { MatButtonModule} from '@angular/material/button';\nimport { MatToolbarModule} from '@angular/material/toolbar';\nimport { MatExpansionModule} from '@angular/material/expansion';\n\n//configure route for router\nconst appRoutes: Routes = [\n  {path: 'create', component: PostCreateComponent},\n  {path: 'list', component: PostListComponent}\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PostCreateComponent,\n    HeaderComponent,\n    PostListComponent,\n    OptionListComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatCardModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    //Add appRoutes to RouterMdodule method to configure the router\n    RouterModule.forRoot(appRoutes)\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html'\n})\n\nexport class HeaderComponent {}\n\n\n","<mat-toolbar color=\"primary\">My message</mat-toolbar>\n","import {Component, EventEmitter, Output} from '@angular/core';\nimport {NgForm} from '@angular/forms';\nimport {PostsService} from '../posts.service';\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css']\n})\n\nexport class PostCreateComponent{\n  enteredTitle= '';\n  enteredContent= '';\n\n  //@Output() postCreated = new EventEmitter<Post>();\n\n  //connect to service\n  constructor(public postsService: PostsService) {}\n\n  onAddPost(form: NgForm){\n    if (form.invalid){\n      return;\n    }\n\n    /*\n    const post: Post = {\n      title: form.value.title,\n      content: form.value.content\n    };\n    this.postCreated.emit(post);\n    */\n   this.postsService.addPost(form.value.title, form.value.content);\n   form.resetForm();\n  }\n}\n","<h2 [ngStyle]=\"{'background-color':'green'}\">Post Create Component</h2>\n<mat-card>\n  <form (submit)=\"onAddPost(postForm)\" #postForm=\"ngForm\">\n  <mat-form-field>\n    <input\n      matInput\n      type=\"text\"\n      name=\"title\"\n      ngModel\n      required\n      minlength=\"3\"\n      #title=\"ngModel\"\n      placeholder=\"Post Title\">\n      <mat-error *ngIf=\"title.invalid\">Please enter a post title</mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <textarea\n      matInput\n      rows=\"4\"\n      name=\"content\"\n      ngModel\n      required\n      #content=\"ngModel\"\n      placeholder=\"Post Content\"></textarea>\n      <mat-error *ngIf=\"content.invalid\">Please enter a content</mat-error>\n  </mat-form-field>\n\n  <button\n    mat-raised-button\n    color = \"accent\"\n    type=\"submit\">Save post</button>\n  </form>\n</mat-card>\n\n\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}